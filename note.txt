****Chuẩn bị môi trường và cài đặt 
- B1: Cài đặt Node.js và npm
- B2: Cài đặt Nest CLI: npm install -g @nestjs/cli
- B3: Tạo dự án: nest new + tên dự án
- B4: Chạy dự án: npm run start dev

****Cấu trúc dự án nestjs
- src/ : thư mục chính của dự án
    + main.ts : File khởi chạy ứng dụng
    + app.module.ts : Module gốc của ứng dụng
    + app.controller.ts : Định nghĩa các route cơ bản
    + app.service.ts : Xử lý logic nghiệp vụ
    - modules/ : Các module chức năng của ứng dụng
        + user/ : vd module user (tạo module: nest generate module + tên module)
            + user.module.ts
            + user.controller.ts
            + user.service.ts
            + dto/ : Các Data Transfer Object (DTO)
    - common/ : Các filr dùng chung (interceptor, guards, pipes)
    - config/ : File cấu hình cho môi trường (dev, prod)
    - entities/ : Các định nghĩa entity cho database
    - utils/ : Các utility/helper functions

****Kiến trúc dự án nestjs
- Kiến trúc Modular và sử dụng mô hình MVC phổ biến. Nó chia ứng dụng thành các module nhỏ, giúp tổ chức code rõ ràng, dễ bảo trì và mở rộng.
- Thành phần chính trong nestjs:
    + Module: Chia ứng dụng thành các khối logic riêng biệt
    + Controller: Xử lý các yêu cầu HTTP (route và endpoint)
    + Service: Chứa logic nghiệp vụ của ứng dụng
    + Provider: CUng cấp dịch vụ (Service, Repository,...) thông qua Dependency Injection
    + Decorator: Các annotation da9885c biệt giúp định nghĩa logic như @Controller, @Module, @Injectable

****Service và Dependency Injection trong Nestjs
- Nestjs sử dũng Dependency Injection để quản lý các service và provider 1 cách tự động
- Service thường được inject vào COntroller thông qua Dependency Injection (Cần import vào provider)
- @Injectable() là decorator đánh dấu class này có thể được inject vào nơi khác
- Dependency Injection là kỹ thuật mà một class nhận phụ thuộc từ bên ngoài thay vì tự tạo
- Scope của Provider trong Dependency Injection:
    + Singleton(mặc định): chỉ được khởi tạo 1 lần duy nhất trong vòng đời của ứng dụng
    + Request Scope: Service được tạo mới mỗi khi có request mới
        vd: @Injectable({scope: Scope.REQUEST})
    + Transient Scope: Service được tạo mới mỗi khi nó được inject vào 1 class khác
        vd: vd: @Injectable({scope: Scope.TRANSIENT})

****Routing và Controller
- Mỗi route được định nghĩa trong controller
- @Get
- @Post 
- @Push : cập nhật theo kiểu ghi đè
- @Delete
- @Patch : chỉ cập nhật thông tin gửi lên

- Định nghĩa Router động và tham số (Params): Dùng @Param
- Xử lý Query Parameters: Dùng @Query
- Xử lý Body với @Post() : Dùng @Body

- Tổ chức route với prefix

****Làm việc với Database (TypeORM) trong NestJS
- TypeORM là 1 ORM (Object Relational Mapping) cho phép tương tác với cơ sở dữ liệu thông qua các class và object thay vì viết trực tiếp câu lệnh SQL
- Hỗ trợ PostgreSQL, MySQL, SQLite, SQL Server,...
- Cài đặt:
    + npm install @nestjs/typeorm typeorm mysql2

- Cấu hình kết nối TypeORM
- Tạo Entity
- Repository: nơi thực hiện các thao tác với database như CRUD
    + Gọi trong service

****Xử lý lỗi và Validation
- Cài thư viện class-validator và class-transformer để đảm bảo dữ liệu gửi lên hợp lệ
    + npm install class-validator class-transformer

- Tạo các DTO

****Validation và Middleware trong NestJS
- Validation: Đảm bảo dữ liệu đầu vào của API hợp lệ trước khi xử lý. Giúp ngăn chặn các lỗi không mong muốn hoặc dữ liệu không hợp lệ đi vào hệ thống
- Middleware: Là các hàm trung gian được thực thi trong quá trình request/response trước khi dữ liệu đến Controller
    + Ghi log
    + Kiểm tra request (ví dụ: xác thực token)
    + Thêm thông tin vào request
